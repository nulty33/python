{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMrsxp8gAgL9N5bVouxgdfr",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/nulty33/python/blob/main/assignment%202\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PG0S9E2p4_a6",
        "outputId": "9092de09-8f61-4735-8b67-bb0bfd4a9358"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model trained successfully.\n",
            "R-squared on Test Set: -1.9490\n",
            "----------------------------------------\n",
            "\n",
            "Model successfully saved as: severity_linear_regression_model.pkl\n",
            "----------------------------------------\n",
            "\n",
            "Hypothetical Input:\n",
            "{'Num_Casualties': 8, 'Speed_Limit': 60, 'Weather_Condition': 'Rain', 'Road_Surface': 'Wet', 'Is_Junction': 1}\n",
            "\n",
            "Predicted Accident Severity Score: 2.00\n",
            "Interpretation: Likely Serious (Score between 1.5 and 2.5)\n",
            "----------------------------------------\n"
          ]
        }
      ],
      "source": [
        "# -----------------------------------------------------------\n",
        "# ROAD ACCIDENT SEVERITY PREDICTION USING LINEAR REGRESSION\n",
        "# -----------------------------------------------------------\n",
        "\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.preprocessing import OneHotEncoder, StandardScaler\n",
        "from sklearn.compose import ColumnTransformer\n",
        "from sklearn.pipeline import Pipeline\n",
        "import joblib  # Library for saving the model\n",
        "\n",
        "# 1. DATA PREPARATION\n",
        "# -----------------------------------------------------------\n",
        "\n",
        "# Synthetic dataset that mimics accident data features\n",
        "data = {\n",
        "    'Accident_Severity': ['Minor', 'Serious', 'Fatal', 'Minor', 'Serious', 'Fatal', 'Minor', 'Serious', 'Minor', 'Fatal'],\n",
        "    'Num_Casualties': [1, 3, 5, 2, 4, 6, 1, 3, 2, 5],\n",
        "    'Speed_Limit': [30, 50, 70, 30, 60, 70, 40, 50, 30, 70],\n",
        "    'Weather_Condition': ['Clear', 'Rain', 'Clear', 'Fog', 'Rain', 'Snow', 'Clear', 'Rain', 'Fog', 'Clear'],\n",
        "    'Road_Surface': ['Dry', 'Wet', 'Dry', 'Dry', 'Wet', 'Ice', 'Dry', 'Wet', 'Dry', 'Dry'],\n",
        "    'Is_Junction': [0, 1, 1, 0, 1, 0, 0, 1, 0, 1]\n",
        "}\n",
        "df = pd.DataFrame(data)\n",
        "\n",
        "# Convert the categorical 'Accident_Severity' to a numerical target (1=Minor, 2=Serious, 3=Fatal)\n",
        "severity_map = {'Minor': 1, 'Serious': 2, 'Fatal': 3}\n",
        "df['Accident_Severity_Score'] = df['Accident_Severity'].map(severity_map)\n",
        "\n",
        "# Define Features (X) and Target (Y)\n",
        "X = df.drop(['Accident_Severity', 'Accident_Severity_Score'], axis=1)\n",
        "y = df['Accident_Severity_Score']\n",
        "\n",
        "# Split data into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n",
        "\n",
        "# Define preprocessing steps (StandardScaler for numerical, OneHotEncoder for categorical)\n",
        "categorical_features = ['Weather_Condition', 'Road_Surface']\n",
        "numerical_features = ['Num_Casualties', 'Speed_Limit', 'Is_Junction']\n",
        "\n",
        "preprocessor = ColumnTransformer(\n",
        "    transformers=[\n",
        "        ('num', StandardScaler(), numerical_features),\n",
        "        ('cat', OneHotEncoder(handle_unknown='ignore'), categorical_features)\n",
        "    ],\n",
        "    remainder='passthrough'\n",
        ")\n",
        "\n",
        "# 2. MODEL CREATION AND FITTING\n",
        "# -----------------------------------------------------------\n",
        "\n",
        "# Create a pipeline that combines preprocessing and the Linear Regression model\n",
        "model_pipeline = Pipeline(steps=[\n",
        "    ('preprocessor', preprocessor),\n",
        "    ('regressor', LinearRegression())\n",
        "])\n",
        "\n",
        "# Train the model (FITTING)\n",
        "model_pipeline.fit(X_train, y_train)\n",
        "\n",
        "# Output for Model Creation/Fitting\n",
        "print(\"Model trained successfully.\")\n",
        "print(f\"R-squared on Test Set: {model_pipeline.score(X_test, y_test):.4f}\")\n",
        "print(\"-\" * 40)\n",
        "print()\n",
        "\n",
        "# 3. MODEL SAVING\n",
        "# -----------------------------------------------------------\n",
        "\n",
        "# Save the entire pipeline (preprocessor + model)\n",
        "MODEL_FILENAME = 'severity_linear_regression_model.pkl'\n",
        "joblib.dump(model_pipeline, MODEL_FILENAME)\n",
        "\n",
        "# Output for Model Saving\n",
        "print(f\"Model successfully saved as: {MODEL_FILENAME}\")\n",
        "print(\"-\" * 40)\n",
        "print()\n",
        "\n",
        "# 4. MODEL LOADING AND PREDICTION EXAMPLE (Demonstration)\n",
        "# -----------------------------------------------------------\n",
        "\n",
        "# Load the saved model\n",
        "loaded_model = joblib.load(MODEL_FILENAME)\n",
        "\n",
        "# Define new, hypothetical data for prediction\n",
        "# Scenario: Heavy Rain, High Speed Limit, High Casualties, at a Junction\n",
        "new_accident_data = pd.DataFrame({\n",
        "    'Num_Casualties': [8],\n",
        "    'Speed_Limit': [60],\n",
        "    'Weather_Condition': ['Rain'],\n",
        "    'Road_Surface': ['Wet'],\n",
        "    'Is_Junction': [1]\n",
        "})\n",
        "\n",
        "# Make the prediction\n",
        "predicted_score = loaded_model.predict(new_accident_data)[0]\n",
        "\n",
        "# Output for Model Loading and Prediction\n",
        "print(f\"Hypothetical Input:\\n{new_accident_data.iloc[0].to_dict()}\")\n",
        "print(f\"\\nPredicted Accident Severity Score: {predicted_score:.2f}\")\n",
        "\n",
        "# Interpretation based on the score (1=Minor, 2=Serious, 3=Fatal)\n",
        "if predicted_score >= 2.5:\n",
        "    severity_interp = \"Likely Fatal (Score >= 2.5)\"\n",
        "elif predicted_score >= 1.5:\n",
        "    severity_interp = \"Likely Serious (Score between 1.5 and 2.5)\"\n",
        "else:\n",
        "    severity_interp = \"Likely Minor (Score < 1.5)\"\n",
        "\n",
        "print(f\"Interpretation: {severity_interp}\")\n",
        "print(\"-\" * 40)\n"
      ]
    }
  ]
}